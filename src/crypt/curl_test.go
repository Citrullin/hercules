package crypt

import (
	"testing"
	"reflect"
	"convert"
)

const trytes = "QBTCHDEADDPCXCSCEAXCBDEAXCCDHDPCGDEAUCCDFDEAGDIDDDDDCDFDHDXCBDVCEAHDWCTCEAHDPCBDVC9DTCEABDTCHDKDCDFDZCEAQCMDEAGDDDPCADADXCBDVCEAHDFDPCBDGDPCRCHDXCCDBDGDSAEAPBCDFDEAADCDFDTCEAXCBDUCCDFDADPCHDXCCDBDQAEAJDXCGDXCHDDBEAWCHDHDDDDBTATAXCCDHDPCGDDDPCADSARCCDADTASAEAHBHBHBHBHBEAFDPCBDSCCDADEAKDXCZCXCDDTCSCXCPCEAPCFDHDXCRC9DTCDBEABCRBEATBYBEAPBACSBOBXBNBEAHBHBHBHBHBEABCWCEAYCCDEAPBFDXCTCBDSCEAMAEAEAEAEAEAEAQAEABCWCEAYCCDEAPBIDFDTCBDSCCDNAEAKDPCGDEAPCEAGDWCEAYCCDEAADPCBDVCPCEAADPCVCPCNDXCBDTCEAUCCDFDADTCFD9DMDEADDIDQC9DXCGDWCTCSCEAQCMDEAUBCDSCPCBDGDWCPCQAEAQCTCVCXCBDBDXCBDVCEAXCBDEAVACB9BWASAEAUBCDSCPCBDGDWCPCEAIDGDTCSCEAHDWCTCEAZCBDCDKD9DTCSCVCTCEAVCPCXCBDTCSCEAUCFDCDADEADDIDQC9DXCGDWCXCBDVCEAADPCVCPCNDXCBDTCGDEAPCXCADTCSCEAPCHDEAMDCDIDBDVCEAVCXCFD9DGDQAEAXCBDRC9DIDSCXCBDVCEAXBPCZCPCMDCDGDWCXCEAPCBDSCEABCWCEAYCCDEAMB9DIDQCQAEAPCGDEAKDTC9D9DEAPCGDEAHDWCTCEATCLDDDTCFDXCTCBDRCTCEAUCFDCDADEADDIDQC9DXCGDWCXCBDVCEAFCTCTCZC9DMDEABCWCCDBDTCBDEAWBPCVCPCNDXCBDTCSAEABCWCEAYCCDEAPBFDXCTCBDSCEAXCGDEARCCDBDGDXCSCTCFDTCSCEAHDWCTCEAGDIDRCRCTCGDGDCDFDEAHDCDEABCWCEAYCCDEAMB9DIDQCSAEASBBDEAVACB9BXAQAEABCWCIDTCXCGDWCPCEAQCTCVCPCBDEADDIDQC9DXCGDWCXCBDVCEAWBPCFDVCPCFDTCHDQAEAPCBDSCEAHDWCTCEAHDKDCDEAADPCVCPCNDXCBDTCGDEAQCTCRCPCADTCEAUCXCTCFDRCTCEARCCDADDDTCHDXCHDCDFDGDSAEABCWCCDVCPCZCIDZCPCBDEATCBDHDTCFDTCSCEAHDWCTCEAADPCFDZCTCHDEARCCDADDDTCHDXCHDXCCDBDEAXCBDEAVACB9BBBEAKDXCHDWCEABCWCEAYCCDEAMBCDADXCRCSAJ9NBIDFDXCBDVCEAHDWCXCGDEAHDXCADTCQAEADDCDDDID9DPCFDEAGDTCFDXCTCGDEAGDIDRCWCEAPCGDEARBPCXCZCPCFDPCRAGDPCBDEAVCPCEACCEAFDIDEAMAQCMDEAFCPCZCXCEAHCPCADPCHDCDNAEAPCBDSCEABCTCXCHDCDEABCWCCDZCIDBDFAEAMAQCMDEAHCEAZCCDEABCWCEAYCXCNAEAKDTCFDTCEADDIDQC9DXCGDWCTCSCEAXCBDEABCWCEAYCCDEAPBFDXCTCBDSCSAEANBTCGDDDXCHDTCEAHDWCTCEADDCDDDID9DPCFDXCHDMDEACDUCEAHDWCTCGDTCEAGDTCFDXCTCGDQAEAHDWCTCEARCXCFDRCID9DPCHDXCCDBDEAQCTCVCPCBDEAHDCDEASCTCRC9DXCBDTCEAPCBDSCEAHDWCTCEAADPCVCPCNDXCBDTCEASCFDCDDDDDTCSCEAUCFDCDADEAKDTCTCZC9DMDEAHDCDEAQCXCRAADCDBDHDWC9DMDEADDIDQC9DXCRCPCHDXCCDBDQAEAPCBDSCSASASA9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999OFFLINE9SPAM9ADDRESS99999999999999999999999999999999999999999999999999999999TYPPI999999999999999999999999999ERUASPAM9DOT9COM9999TYPPI99GVKIDYD99999999999999999999BFISVJDKLL9XYGQNPQZZCWCJISYRJZGYAJNDVVJQYEPHUYI9VOFVKAXSAWUD9JFALDKIQJGHPQKRDD99ABEVRQTDXKMPK9IBSOUDZXAPPBPJKAOFNGGEWPCPTGNP99ZTLM9JONHENDGKYUHUOOHHDMSKWBFBV99999ZBPPBXBMYTCPLNPHZFMISCXBWFPAPXJQTLBBPAPETIFJRLQEBYMBCLZWDYYZIAAPFCXKWHBSDCNZA9999IOTASPAM9DOT9COM9999TYPPI99USYEAXQKE999999999MMMMMMMMMCAB9999999IWB99999999999999";
const hash = "HTULPSHIZIRNQMSEUNKFBQZRZ9JZVCIUZILZWWV9QVSNDRBLRHLYWTCPNFSJWBATJVSNMKUUFYSJA9999"

func TestCurl(t *testing.T) {
	result := RunHashCurl(convert.TrytesToTrits(trytes))
	if !reflect.DeepEqual(result, convert.TrytesToTrits(hash)) {
		t.Error("Wrong curl!", result)
	}
}