package transaction

import "testing"
import (
	"convert"
	"reflect"
)

const cooAddress = "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU"
const trytes
const trytes1 = "JVNZIOSNJALANXLUBNLIAQEFZADVTLRR9EQXSRBRQDVMRUXFNDPECOHSFJYJHBTBRDALISDAOQGRBRRAQUCXV9VROWTTRQWDCNTBIMQOTYOUDDMXH9DVLGKVXTSPBOYEUDAA9MBNIMZXRHACZUAK9OPPEM9INGCBYOFXLFCAYQFCWNEMDPKMMFHUAQIWNENIAXUOTVLMAVFJC9IMORQQUDEUWMGGNSKJRMEKURRVRDXILRYULXXAUIXHAUNVPFFSSDHVZHTVIGHFGRVIAE9FBBAYVGZKQJXMTWNBHYVJCLORRNFMTXMJG9DJGXSNJERTFEDCXYBCPLXAFKABZVFOWDILZYUOKHNEXTXDCSEMOMBTEPESFMZCIXBOEUWSIBOZDIFST9IEAUMFJLOVTIGBPVCMOKTTWJRK9XCUTSFQPUUNCMEJTSIIMIGMBTNSMJNUTJBNOZUOMKLS9AYEMA9OBOUGPKQDE9FHQDAJVKFVUGOBQSOKWS9QYPVXCLBRO9RPZWHOXGGWG9NEBWOGSHFUOQTZKLRRQFNELNSIVINR9AHPGVEIINZCCKRRSIRJFMPZHGEU9WQZKWQPNGKUZHNVYEKGTCBFPUDS9K9URTVXKNVQEUOKHDEQRXDUOHEYRXTAIWECYECNMOXACMECBGGXJVPPKXLMRCSN9WEOKDVLKHTUORCZ9LKBMBDEGKRUBCNDZGYXPIVWUFOJSEGINVXZDHDMSBPYY9GVZCV9PIGD9JKXHOOXHKBSQFIMKJMKUHSUYZOVIFKATFHZOGCJDGHFQJZRSRSXDHMKIWFWLNQZHRZNGNLZYCVZBQDTTBIEBLD9C9EGEZFEGOINNGUIFHPVJVZM9MVBB9JJPIFXCGVDYXLDDJCKMBUFKELRJMUICW9XDJVDMJ9QAEICPGGYGUJHZJUFRETMSIMESLHDXSC9ZRELEQBACBYFCIJHBEHIWJAHAQJCYJFKCKPDAANYZLMCPLPVBQJHOSNBLEIWAVSGMXAFMOTQAPN9GDGQKCVQQPQL9OGUUAXVUZVCFBZWNDGEQXCZEWTTSIBMDBUQUHXSVBKRXCCOSRUHIKOJYNYGZYBEVXXXEQCCY9VPCMZCUKBQQH9OSIRBQYZTZWEBMEGRGEIWCXNJVMZ9GJVIGGKRVBHBNCDKKQJNVNSYRYNJDGSIMZ9IEMHNHBTJDSHHKSCLNLXJDUYEGFPRBVWCCSLQMDKLTRZPJGPHLD9SXWIRMPZGRSGZZBYOEEHMCWPVDAGBHTILMBUUTTACMP99OTEBMCTFBDEWCXOQLVUBSZJUSWSNCNFXCZWTWPHJ9EQINCF9WQDTTEFNWLKKNLAKIP9FHCEOXTIU9YYNBFYEXTR9KIFUEUC9IDAXYJTEHEGZAHWSYPZQVTGTJDKCQLEMQZAXTWFIHMYYHPMKCVJCXS9T9IUMIAOIKXLJQINVNNUERIRXSAKHIDVSICOMGGWCJHDXFCZHCHADMIUSETWYOGQEFIUBRXF9LJYAURERWTPGJYDDAXIMIVQBJSF9AIDHIVAOMUUOAXQVGYZASTEBAQNXJJROCYRTDPYFUIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999VXTEHYD99A99999999A99999999OOTYFRRV9TMNIYEESJKSZLOFYHNFRWBUFLERFUN9ISQYYFLTQPOTZTYRMWETMEKYUONFECQIDH9DZET9CKEKJEBOOVUJ9HQREERKSIYIJBUOBRJIYHKESMXRWTCHKRGQDEHAKASDBVWADCPNSCWDLCSTJRRBCA9999GHQRSOO9AG9LACJXRBTEE9CZW9Y9KNLWVQFRHUXJSHVHHRNXLOOETXIIZUS9IEWMOXERUEUVXKCRZ9999999999999999999999999999999999999999999999999999999999GSQDCVITEDXNHPPAVHVGBTFNQUD"
const milestone = 435502

func TestGetMerkleRoot(t *testing.T) {
	t0 := TrytesToObject(trytes0)
	//t1 := TrytesToObject(trytes1)
	milestoneIndex := int(convert.TritsToInt(convert.TrytesToTrits(t0.ObsoleteTag[:5])).Uint64())
	trunkTransactionTrits := convert.TrytesToTrits(t0.TrunkTransaction)
	signatureFragmentTrits := convert.TrytesToTrits(t0.SignatureMessageFragment)
	t1Trits := convert.TrytesToTrits(trytes1)
	normalized := NormalizedBundle(trunkTransactionTrits)[:NUMBER_OF_FRAGMENT_CHUNKS]
	digests := Digest(normalized, signatureFragmentTrits, 0, 0,false)
	address := Address(digests)
	merkleRoot := GetMerkleRoot(
		address,
		t1Trits,
		0,
		milestoneIndex,
		NUMBER_OF_KEYS_IN_MILESTONE,
	)
	if !reflect.DeepEqual(convert.TritsToTrytes(merkleRoot), cooAddress) {
		t.Error("NO milestone detected!")
	}
}